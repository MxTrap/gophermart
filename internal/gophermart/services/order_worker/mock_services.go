// Code generated by MockGen. DO NOT EDIT.
// Source: order_worker_test.go

// Package services is a generated GoMock package.
package order_worker

import (
	context "context"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockaccrualService is a mock of accrualService interface.
type MockaccrualService struct {
	ctrl     *gomock.Controller
	recorder *MockaccrualServiceMockRecorder
}

// MockaccrualServiceMockRecorder is the mock recorder for MockaccrualService.
type MockaccrualServiceMockRecorder struct {
	mock *MockaccrualService
}

// NewMockaccrualService creates a new mock instance.
func NewMockaccrualService(ctrl *gomock.Controller) *MockaccrualService {
	mock := &MockaccrualService{ctrl: ctrl}
	mock.recorder = &MockaccrualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccrualService) EXPECT() *MockaccrualServiceMockRecorder {
	return m.recorder
}

// GetOrderAccrual mocks base method.
func (m *MockaccrualService) GetOrderAccrual(number string) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAccrual", number)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderAccrual indicates an expected call of GetOrderAccrual.
func (mr *MockaccrualServiceMockRecorder) GetOrderAccrual(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAccrual", reflect.TypeOf((*MockaccrualService)(nil).GetOrderAccrual), number)
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockstorage) Get(elemCount int) []entity.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", elemCount)
	ret0, _ := ret[0].([]entity.Order)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockstorageMockRecorder) Get(elemCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockstorage)(nil).Get), elemCount)
}

// Push mocks base method.
func (m *Mockstorage) Push(el entity.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", el)
}

// Push indicates an expected call of Push.
func (mr *MockstorageMockRecorder) Push(el interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*Mockstorage)(nil).Push), el)
}

// MockorderBalanceRepo is a mock of orderBalanceRepo interface.
type MockorderBalanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockorderBalanceRepoMockRecorder
}

// MockorderBalanceRepoMockRecorder is the mock recorder for MockorderBalanceRepo.
type MockorderBalanceRepoMockRecorder struct {
	mock *MockorderBalanceRepo
}

// NewMockorderBalanceRepo creates a new mock instance.
func NewMockorderBalanceRepo(ctrl *gomock.Controller) *MockorderBalanceRepo {
	mock := &MockorderBalanceRepo{ctrl: ctrl}
	mock.recorder = &MockorderBalanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderBalanceRepo) EXPECT() *MockorderBalanceRepoMockRecorder {
	return m.recorder
}

// UpdateOrderBalance mocks base method.
func (m *MockorderBalanceRepo) UpdateOrderBalance(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderBalance", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderBalance indicates an expected call of UpdateOrderBalance.
func (mr *MockorderBalanceRepoMockRecorder) UpdateOrderBalance(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderBalance", reflect.TypeOf((*MockorderBalanceRepo)(nil).UpdateOrderBalance), ctx, order)
}
