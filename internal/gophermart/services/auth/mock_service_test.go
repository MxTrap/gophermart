// Code generated by MockGen. DO NOT EDIT.
// Source: auth_test.go

// Package services is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockuserRepo) FindUserByID(ctx context.Context, userID int64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockuserRepoMockRecorder) FindUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockuserRepo)(nil).FindUserByID), ctx, userID)
}

// FindUserByUsername mocks base method.
func (m *MockuserRepo) FindUserByUsername(ctx context.Context, username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", ctx, username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockuserRepoMockRecorder) FindUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockuserRepo)(nil).FindUserByUsername), ctx, username)
}

// SaveUser mocks base method.
func (m *MockuserRepo) SaveUser(ctx context.Context, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockuserRepoMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockuserRepo)(nil).SaveUser), ctx, user)
}

// MockjwtService is a mock of jwtService interface.
type MockjwtService struct {
	ctrl     *gomock.Controller
	recorder *MockjwtServiceMockRecorder
}

// MockjwtServiceMockRecorder is the mock recorder for MockjwtService.
type MockjwtServiceMockRecorder struct {
	mock *MockjwtService
}

// NewMockjwtService creates a new mock instance.
func NewMockjwtService(ctrl *gomock.Controller) *MockjwtService {
	mock := &MockjwtService{ctrl: ctrl}
	mock.recorder = &MockjwtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjwtService) EXPECT() *MockjwtServiceMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockjwtService) GenerateAccessToken(user entity.User, ttl time.Duration) (entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", user, ttl)
	ret0, _ := ret[0].(entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockjwtServiceMockRecorder) GenerateAccessToken(user, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockjwtService)(nil).GenerateAccessToken), user, ttl)
}
