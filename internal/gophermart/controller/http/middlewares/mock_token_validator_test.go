// Code generated by MockGen. DO NOT EDIT.
// Source: authorization_test.go

// Package middlewares is a generated GoMock package.
package middlewares

import (
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MocktokenValidator is a mock of tokenValidator interface.
type MocktokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenValidatorMockRecorder
}

// MocktokenValidatorMockRecorder is the mock recorder for MocktokenValidator.
type MocktokenValidatorMockRecorder struct {
	mock *MocktokenValidator
}

// NewMocktokenValidator creates a new mock instance.
func NewMocktokenValidator(ctrl *gomock.Controller) *MocktokenValidator {
	mock := &MocktokenValidator{ctrl: ctrl}
	mock.recorder = &MocktokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenValidator) EXPECT() *MocktokenValidatorMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MocktokenValidator) Parse(token entity.Token) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MocktokenValidatorMockRecorder) Parse(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MocktokenValidator)(nil).Parse), token)
}
