// Code generated by MockGen. DO NOT EDIT.
// Source: balance_test.go

// Package handlers is a generated GoMock package.
package balance

import (
	context "context"
	http "net/http"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockbalanceService is a mock of balanceService interface.
type MockbalanceService struct {
	ctrl     *gomock.Controller
	recorder *MockbalanceServiceMockRecorder
}

// MockbalanceServiceMockRecorder is the mock recorder for MockbalanceService.
type MockbalanceServiceMockRecorder struct {
	mock *MockbalanceService
}

// NewMockbalanceService creates a new mock instance.
func NewMockbalanceService(ctrl *gomock.Controller) *MockbalanceService {
	mock := &MockbalanceService{ctrl: ctrl}
	mock.recorder = &MockbalanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbalanceService) EXPECT() *MockbalanceServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockbalanceService) Get(ctx context.Context, userID int64) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockbalanceServiceMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockbalanceService)(nil).Get), ctx, userID)
}

// MockwithdrawalService is a mock of withdrawalService interface.
type MockwithdrawalService struct {
	ctrl     *gomock.Controller
	recorder *MockwithdrawalServiceMockRecorder
}

// MockwithdrawalServiceMockRecorder is the mock recorder for MockwithdrawalService.
type MockwithdrawalServiceMockRecorder struct {
	mock *MockwithdrawalService
}

// NewMockwithdrawalService creates a new mock instance.
func NewMockwithdrawalService(ctrl *gomock.Controller) *MockwithdrawalService {
	mock := &MockwithdrawalService{ctrl: ctrl}
	mock.recorder = &MockwithdrawalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwithdrawalService) EXPECT() *MockwithdrawalServiceMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockwithdrawalService) Withdraw(ctx context.Context, userID int64, withdrawal entity.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockwithdrawalServiceMockRecorder) Withdraw(ctx, userID, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockwithdrawalService)(nil).Withdraw), ctx, userID, withdrawal)
}

// MockauthMiddleware is a mock of authMiddleware interface.
type MockauthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockauthMiddlewareMockRecorder
}

// MockauthMiddlewareMockRecorder is the mock recorder for MockauthMiddleware.
type MockauthMiddlewareMockRecorder struct {
	mock *MockauthMiddleware
}

// NewMockauthMiddleware creates a new mock instance.
func NewMockauthMiddleware(ctrl *gomock.Controller) *MockauthMiddleware {
	mock := &MockauthMiddleware{ctrl: ctrl}
	mock.recorder = &MockauthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthMiddleware) EXPECT() *MockauthMiddlewareMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockauthMiddleware) Validate(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockauthMiddlewareMockRecorder) Validate(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockauthMiddleware)(nil).Validate), next)
}
