// Code generated by MockGen. DO NOT EDIT.
// Source: order_test.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	http "net/http"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockorderService is a mock of orderService interface.
type MockorderService struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceMockRecorder
}

// MockorderServiceMockRecorder is the mock recorder for MockorderService.
type MockorderServiceMockRecorder struct {
	mock *MockorderService
}

// NewMockorderService creates a new mock instance.
func NewMockorderService(ctrl *gomock.Controller) *MockorderService {
	mock := &MockorderService{ctrl: ctrl}
	mock.recorder = &MockorderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderService) EXPECT() *MockorderServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockorderService) GetAll(ctx context.Context, userID int64) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockorderServiceMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockorderService)(nil).GetAll), ctx, userID)
}

// SaveOrder mocks base method.
func (m *MockorderService) SaveOrder(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockorderServiceMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockorderService)(nil).SaveOrder), ctx, order)
}

// MockauthMiddleware is a mock of authMiddleware interface.
type MockauthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockauthMiddlewareMockRecorder
}

// MockauthMiddlewareMockRecorder is the mock recorder for MockauthMiddleware.
type MockauthMiddlewareMockRecorder struct {
	mock *MockauthMiddleware
}

// NewMockauthMiddleware creates a new mock instance.
func NewMockauthMiddleware(ctrl *gomock.Controller) *MockauthMiddleware {
	mock := &MockauthMiddleware{ctrl: ctrl}
	mock.recorder = &MockauthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthMiddleware) EXPECT() *MockauthMiddlewareMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockauthMiddleware) Validate(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockauthMiddlewareMockRecorder) Validate(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockauthMiddleware)(nil).Validate), next)
}
