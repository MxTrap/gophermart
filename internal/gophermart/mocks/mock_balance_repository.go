// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/tmp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBalanceRepository) Get(ctx context.Context, userID int64) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBalanceRepositoryMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBalanceRepository)(nil).Get), ctx, userID)
}

// Increase mocks base method.
func (m *MockBalanceRepository) Increase(ctx context.Context, tx pgx.Tx, userID int64, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increase", ctx, tx, userID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increase indicates an expected call of Increase.
func (mr *MockBalanceRepositoryMockRecorder) Increase(ctx, tx, userID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increase", reflect.TypeOf((*MockBalanceRepository)(nil).Increase), ctx, tx, userID, sum)
}

// Withdraw mocks base method.
func (m *MockBalanceRepository) Withdraw(ctx context.Context, tx pgx.Tx, userID int64, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, tx, userID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceRepositoryMockRecorder) Withdraw(ctx, tx, userID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceRepository)(nil).Withdraw), ctx, tx, userID, sum)
}
