// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/tmp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceWithdrawalRepository is a mock of BalanceWithdrawalRepository interface.
type MockBalanceWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceWithdrawalRepositoryMockRecorder
}

// MockBalanceWithdrawalRepositoryMockRecorder is the mock recorder for MockBalanceWithdrawalRepository.
type MockBalanceWithdrawalRepositoryMockRecorder struct {
	mock *MockBalanceWithdrawalRepository
}

// NewMockBalanceWithdrawalRepository creates a new mock instance.
func NewMockBalanceWithdrawalRepository(ctrl *gomock.Controller) *MockBalanceWithdrawalRepository {
	mock := &MockBalanceWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceWithdrawalRepository) EXPECT() *MockBalanceWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockBalanceWithdrawalRepository) Withdraw(ctx context.Context, userID int64, withdrawal entity.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceWithdrawalRepositoryMockRecorder) Withdraw(ctx, userID, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceWithdrawalRepository)(nil).Withdraw), ctx, userID, withdrawal)
}
