// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/tmp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageService) Get(elemCount int) []entity.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", elemCount)
	ret0, _ := ret[0].([]entity.Order)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStorageServiceMockRecorder) Get(elemCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageService)(nil).Get), elemCount)
}

// Push mocks base method.
func (m *MockStorageService) Push(el entity.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", el)
}

// Push indicates an expected call of Push.
func (mr *MockStorageServiceMockRecorder) Push(el interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockStorageService)(nil).Push), el)
}
