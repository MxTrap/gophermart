// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/tmp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/MxTrap/gophermart/internal/gophermart/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceOrderRepository is a mock of BalanceOrderRepository interface.
type MockBalanceOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceOrderRepositoryMockRecorder
}

// MockBalanceOrderRepositoryMockRecorder is the mock recorder for MockBalanceOrderRepository.
type MockBalanceOrderRepositoryMockRecorder struct {
	mock *MockBalanceOrderRepository
}

// NewMockBalanceOrderRepository creates a new mock instance.
func NewMockBalanceOrderRepository(ctrl *gomock.Controller) *MockBalanceOrderRepository {
	mock := &MockBalanceOrderRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceOrderRepository) EXPECT() *MockBalanceOrderRepositoryMockRecorder {
	return m.recorder
}

// UpdateOrderBalance mocks base method.
func (m *MockBalanceOrderRepository) UpdateOrderBalance(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderBalance", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderBalance indicates an expected call of UpdateOrderBalance.
func (mr *MockBalanceOrderRepositoryMockRecorder) UpdateOrderBalance(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderBalance", reflect.TypeOf((*MockBalanceOrderRepository)(nil).UpdateOrderBalance), ctx, order)
}
